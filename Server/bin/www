#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../src/app');
var debug = require('debug')('idahub:server');
var http = require('http');
var mongoose = require('mongoose');
var process = require('process');
var fs = require('fs');
var https = require('https');

var privateKey  = fs.readFileSync('/etc/letsencrypt/live/idahub.live/privkey.pem', 'utf8')
var certificate = fs.readFileSync('/etc/letsencrypt/live/idahub.live/fullchain.pem', 'utf8');
var credentials = {key: privateKey, cert: certificate};

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
var portHTTPS = normalizePort(process.env.HTTPS_PORT || '443');
app.set('port', portHTTPS);

/**
 * Create HTTP server to forward to https
 */
var server = http.createServer(function (req, res) {
    res.writeHead(301, { "Location": "https://" + req.headers['host'] + req.url });
    res.end();
}).listen(80);

/**
 * Create https server
 */
var httpsServer = https.createServer(credentials, app);

/**
 * Connect to the mongo server
 */
mongoose.connect("mongodb://localhost/idahub").catch(r => {
  debug("Failed to connect to DB: " + r);
  server.close();
  process.exit(1);
});

/* The actual https server, listen */
httpsServer.listen(portHTTPS);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

httpsServer.on('exit', () => httpsServer.close());
httpsServer.on('uncaughtException', () => httpsServer.close());
httpsServer.on('SIGTERM', () => httpsServer.close());

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
